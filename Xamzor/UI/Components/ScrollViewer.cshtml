@inherits UIElement

<div id="@Id" class="@CssClass" style="@LayoutCss"
     xamzor-zoommode="@ZoomMode"
     xamzor-scrollbarvisibility="@ScrollBarVisibility">
    <!--
        Bottom and right padding are not honored when scrolling is enabled 
        so we need an extra div with border (margin doesn't work there either
        but border does).
    -->
    <div style="@InnerCss">
        @ChildContent
    </div>
</div>

@functions{

    public ScrollMode HorizontalScrollMode { get; set; } = ScrollMode.Disabled;

    public ScrollMode VerticalScrollMode { get; set; } = ScrollMode.Auto;

    public ZoomMode ZoomMode { get; set; } = ZoomMode.Disabled;

    public ScrollBarVisibility ScrollBarVisibility { get; set; } = ScrollBarVisibility.Visible;

    private string InnerCss { get; set; }

    protected override void ComputeOwnLayoutCss(System.Text.StringBuilder sb)
    {
        base.ComputeOwnLayoutCss(sb);
        sb.Append($"overflow-x: {(HorizontalScrollMode == ScrollMode.Disabled ? "hidden" : HorizontalScrollMode == ScrollMode.Enabled ? "scroll" : "auto")}; ");
        sb.Append($"overflow-y: {(VerticalScrollMode == ScrollMode.Disabled ? "hidden" : VerticalScrollMode == ScrollMode.Enabled ? "scroll" : "auto")}; ");
        sb.Append("padding: 0; "); // padding is instead applied to inner div
        
        // Compute CSS for inner div
        var innerCss = new System.Text.StringBuilder("display: grid; border-style: solid; border-color: transparent; ");
        innerCss.Append($"border-width: {ThicknessToCss(Padding)}; ");

        // If scrolling is disabled, set minimum size to 0 (default is auto) to allow
        // the inner div to become smaller than its content, forcing the content to get
        // clipped if it doesn't fit into the available space.
        if (HorizontalScrollMode == ScrollMode.Disabled)
            innerCss.Append("min-width: 0; ");
        if (VerticalScrollMode == ScrollMode.Disabled)
            innerCss.Append("min-height: 0; ");

        // For Edge: If scrolling is allowed, the default row/column size won't let the
        // scrollable content overflow the ScrollViewer. We have to set it to 'max-content'.
        if (HorizontalScrollMode != ScrollMode.Disabled)
            innerCss.Append("grid-auto-columns: max-content; ");
        if (VerticalScrollMode != ScrollMode.Disabled)
            innerCss.Append("grid-auto-rows: max-content; ");

        InnerCss = innerCss.ToString();
    }

    protected override void ComputeChildLayoutCss(System.Text.StringBuilder sb, UIElement child)
    {
        base.ComputeChildLayoutCss(sb, child);

        if (HorizontalScrollMode != ScrollMode.Disabled)
            sb.Append($"max-width: none; ");

        if (VerticalScrollMode != ScrollMode.Disabled)
            sb.Append($"max-height: none; ");
    }
}