@inherits UIElement

<div id="@Id" class="@CssClass" style="@CssStyle" ref="LayoutRoot"
     xamzor-zoommode="@ZoomMode"
     xamzor-scrollbarvisibility="@ScrollBarVisibility">
    <!--
        TODO: This will again be a problem:
        Bottom and right padding are not honored when scrolling is enabled 
        so we need an extra div with border (margin doesn't work there either
        but border does).
    -->
    @ChildContent.SurroundWithParent(this)
</div>

@functions{

    public static readonly PropertyKey HorizontalScrollModeProperty = PropertyKey.Create<ScrollMode, ScrollViewer>(nameof(HorizontalScrollMode), ScrollMode.Disabled);
    public static readonly PropertyKey VerticalScrollModeProperty = PropertyKey.Create<ScrollMode, ScrollViewer>(nameof(VerticalScrollMode), ScrollMode.Auto);
    public static readonly PropertyKey ZoomModeProperty = PropertyKey.Create<ZoomMode, ScrollViewer>(nameof(ZoomMode), ZoomMode.Disabled);
    public static readonly PropertyKey ScrollBarVisibilityProperty = PropertyKey.Create<ScrollBarVisibility, ScrollViewer>(nameof(ScrollBarVisibility), ScrollBarVisibility.Visible);

    [Parameter] protected ScrollMode HorizontalScrollMode { get => Properties.Get<ScrollMode>(HorizontalScrollModeProperty); set => Properties.Set(HorizontalScrollModeProperty, value); }
    [Parameter] protected ScrollMode VerticalScrollMode { get => Properties.Get<ScrollMode>(VerticalScrollModeProperty); set => Properties.Set(VerticalScrollModeProperty, value); }
    [Parameter] protected ZoomMode ZoomMode { get => Properties.Get<ZoomMode>(ZoomModeProperty); set => Properties.Set(ZoomModeProperty, value); }
    [Parameter] protected ScrollBarVisibility ScrollBarVisibility { get => Properties.Get<ScrollBarVisibility>(ScrollBarVisibilityProperty); set => Properties.Set(ScrollBarVisibilityProperty, value); }

    protected override void ComputeCss(System.Text.StringBuilder sb)
    {
        base.ComputeCss(sb);
        sb.Append($"overflow-x: {(HorizontalScrollMode == ScrollMode.Disabled ? "hidden" : HorizontalScrollMode == ScrollMode.Enabled ? "scroll" : "auto")}; ");
        sb.Append($"overflow-y: {(VerticalScrollMode == ScrollMode.Disabled ? "hidden" : VerticalScrollMode == ScrollMode.Enabled ? "scroll" : "auto")}; ");
    }

    protected override LayoutFunc ChildLayout => Layouts.Clip(base.ChildLayout);
}