@inherits UIElement

<div id="@Id" class="@CssClass" style="@CssStyle" ref="LayoutRoot">@if (Text != null)
    {
        @Text
    }
    else
    {
        @ChildContent.SurroundWithParent(this)
    }
</div>

@functions{

    public static readonly PropertyKey ForegroundProperty = PropertyKey.Create<string, TextBlock>(nameof(Foreground), "black");
    public static readonly PropertyKey FontFamilyProperty = PropertyKey.Create<string, TextBlock>(nameof(FontFamily), "Segoe UI");
    public static readonly PropertyKey FontSizeProperty = PropertyKey.Create<double, TextBlock>(nameof(FontSize), 16);
    public static readonly PropertyKey FontWeightProperty = PropertyKey.Create<FontWeight, TextBlock>(nameof(FontWeight), FontWeight.Normal);
    public static readonly PropertyKey FontStyleProperty = PropertyKey.Create<FontStyle, TextBlock>(nameof(FontStyle), FontStyle.Normal);
    public static readonly PropertyKey TextWrappingProperty = PropertyKey.Create<TextWrapping, TextBlock>(nameof(TextWrapping), TextWrapping.WrapWholeWords);
    public static readonly PropertyKey TextTrimmingProperty = PropertyKey.Create<TextTrimming, TextBlock>(nameof(TextTrimming), TextTrimming.None);
    public static readonly PropertyKey IsTextSelectionEnabledProperty = PropertyKey.Create<bool, TextBlock>(nameof(IsTextSelectionEnabled), false);
    public static readonly PropertyKey TextProperty = PropertyKey.Create<string, TextBlock>(nameof(Text));

    [Parameter] protected string Foreground { get => Properties.Get<string>(ForegroundProperty); set => Properties.Set(ForegroundProperty, value); }
    [Parameter] protected string FontFamily { get => Properties.Get<string>(FontFamilyProperty); set => Properties.Set(FontFamilyProperty, value); }
    [Parameter] protected double FontSize { get => Properties.Get<double>(FontSizeProperty); set => Properties.Set(FontSizeProperty, value); }
    [Parameter] protected FontWeight FontWeight { get => Properties.Get<FontWeight>(FontWeightProperty); set => Properties.Set(FontWeightProperty, value); }
    [Parameter] protected FontStyle FontStyle { get => Properties.Get<FontStyle>(FontStyleProperty); set => Properties.Set(FontStyleProperty, value); }
    [Parameter] protected TextWrapping TextWrapping { get => Properties.Get<TextWrapping>(TextWrappingProperty); set => Properties.Set(TextWrappingProperty, value); }
    [Parameter] protected TextTrimming TextTrimming { get => Properties.Get<TextTrimming>(TextTrimmingProperty); set => Properties.Set(TextTrimmingProperty, value); }
    [Parameter] protected bool IsTextSelectionEnabled { get => Properties.Get<bool>(IsTextSelectionEnabledProperty); set => Properties.Set(IsTextSelectionEnabledProperty, value); }
    [Parameter] protected string Text { get => Properties.Get<string>(TextProperty); set => Properties.Set(TextProperty, value); }

    protected override LayoutFunc ChildLayout => Layouts.Trace(context =>
    {
        switch (context.Phase)
        {
            case LayoutPhase.Measure:
                return MeasureOverride(context.Space);

            case LayoutPhase.Arrange:
                return base.ChildLayout(context);

            default:
                throw new NotImplementedException();
        }
    }, "HtmlTextLayout");

    protected override void ComputeCss(System.Text.StringBuilder sb)
    {
        base.ComputeCss(sb);

        if (FontFamily != null)
            sb.Append($"font-family: {FontFamily}; ");

        sb.Append($"font-size: {FontSize}px; ");

        if (Foreground != null)
            sb.Append($"color: {Foreground}; ");

        if (FontWeight != FontWeight.Normal)
            sb.Append($"font-weight: {(int)FontWeight}; ");

        if (FontStyle != FontStyle.Normal)
            sb.Append($"font-style: {FontStyle.ToString().ToLower()}; ");

        sb.Append($"white-space: {(TextWrapping == TextWrapping.NoWrap ? "nowrap" : "pre-line")}; ");

        if (TextWrapping == TextWrapping.Wrap)
            sb.Append($"overflow-wrap: break-word; ");

        if (TextTrimming != TextTrimming.None)
            sb.Append($"text-overflow: ellipsis; ");

        if (!IsTextSelectionEnabled)
            sb.Append("user-select: none; -ms-user-select: none; cursor: default; ");
    }

    // TODO: Measure self (own HTML element if realized already)
    private Vector2 MeasureOverride(Vector2 availableSize)
    {
        if (Text == null && ChildContent == null)
            return Vector2.Zero;

        var widthConstraint = double.IsPositiveInfinity(availableSize.X) ? default(double?) : availableSize.X;
        var heightConstraint = double.IsPositiveInfinity(availableSize.Y) ? default(double?) : availableSize.Y;
        var sizeString = RegisteredFunction.Invoke<string>("Xamzor.measureHtml", LayoutRoot, widthConstraint, heightConstraint);

        var sizeParts = sizeString.Split(',');

        var size = Vector2.Min(availableSize, new Vector2(
            double.Parse(sizeParts[0]),
            double.Parse(sizeParts[1])));

        UILog.Write("TEXT", $"Measured a size of {size} for text '{Text}'");

        return size;
    }
}