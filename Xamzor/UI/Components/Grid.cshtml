@inherits UIElement

<div id="@Id" class="@CssClass" style="@LayoutCss" ref="LayoutRoot">
    @ChildContent
</div>

@functions{

    public static readonly PropertyKey RowProperty = PropertyKey.Create<int, Grid>(nameof(Row), 0);
    public static readonly PropertyKey ColumnProperty = PropertyKey.Create<int, Grid>(nameof(Column), 0);
    public static readonly PropertyKey RowSpanProperty = PropertyKey.Create<int, Grid>(nameof(RowSpan), 1);
    public static readonly PropertyKey ColumnSpanProperty = PropertyKey.Create<int, Grid>(nameof(ColumnSpan), 1);

    [Parameter] protected IReadOnlyList<GridTrackDefinition> RowDefinitions { get; set; }
    [Parameter] protected IReadOnlyList<GridTrackDefinition> ColumnDefinitions { get; set; }
    [Parameter] protected double RowSpacing { get; set; } = 0;
    [Parameter] protected double ColumnSpacing { get; set; } = 0;
    [Parameter] protected string Background { get; set; } = "transparent";

    protected override void ComputeOwnLayoutCss(System.Text.StringBuilder sb)
    {
        base.ComputeOwnLayoutCss(sb);

        if (!string.IsNullOrEmpty(Background))
            sb.Append($"background-color: {Background}; ");
    }

    protected override LayoutFunc ChildLayout => Layouts.Grid(
        RowDefinitions,
        ColumnDefinitions,
        Children.OfType<UIElement>().Select(child => new GridItem(
            child.Layout,
            child.Properties.Get<int>(RowProperty),
            child.Properties.Get<int>(ColumnProperty),
            child.Properties.Get<int>(RowSpanProperty),
            child.Properties.Get<int>(ColumnSpanProperty))));
}