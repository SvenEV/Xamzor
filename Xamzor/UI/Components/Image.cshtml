@using static Layman.Layouts
@inherits UIElement

<img id="@Id" class="@CssClass" style="@CssStyle" ref="LayoutRoot"
     src="@Source" onerror="this.style.display = 'none'" />

@functions{

    public static readonly PropertyKey SourceProperty = PropertyKey.Create<string, Image>(nameof(Source));
    public static readonly PropertyKey StretchProperty = PropertyKey.Create<StretchMode, Image>(nameof(Stretch), StretchMode.Uniform);
    public static readonly PropertyKey StretchDirectionProperty = PropertyKey.Create<StretchDirection, Image>(nameof(StretchDirection), StretchDirection.Both);

    [Parameter] protected string Source { get => Properties.Get<string>(SourceProperty); set => Properties.Set(SourceProperty, value); }
    [Parameter] protected StretchMode Stretch { get => Properties.Get<StretchMode>(StretchProperty); set => Properties.Set(StretchProperty, value); }
    [Parameter] protected StretchDirection StretchDirection { get => Properties.Get<StretchDirection>(StretchDirectionProperty); set => Properties.Set(StretchDirectionProperty, value); }

    private Vector2 _imageSize;

    protected override async Task OnParametersSetAsync()
    {
        await (base.OnParametersSetAsync() ?? Task.CompletedTask);

        if (_imageSize != Vector2.Zero || string.IsNullOrWhiteSpace(Source))
            return;

        _imageSize = await ImageMeasureInterop.MeasureImageAsync(Source);
        LayoutCache?.InvalidateMeasure();
    }

    // TODO: Incorporate scaling into StandardLayout because why not?
    // ====> Maybe the FillSpace() call speaks against this...?
    public override LayoutFunc Layout =>
        TraceSpecial(ToString(),
            Callback(onArrangeOut: (_, __) => ApplyBounds(), child:
                Inset(Margin,
                    Cache(LayoutCache,
                        Align(HorizontalAlignment, VerticalAlignment,
                            FixedSize(new Vector2(Width, Height),
                                ClampSize(new Vector2(MinWidth, MinHeight), new Vector2(MaxWidth, MaxHeight),
                                    Scale(Stretch, StretchDirection,
                                        FixedSize(_imageSize)))))))));
}