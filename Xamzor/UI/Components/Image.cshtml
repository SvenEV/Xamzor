@using static Layman.Layouts
@inherits UIElement

<div id="@Id" class="@CssClass" style="@CssStyle" ref="LayoutRoot">
    <img ref="_image" onerror="this.style.display = 'none'"
         src="@Source" style="position: absolute;" />
</div>

@functions{

    public static readonly PropertyKey SourceProperty = PropertyKey.Create<string, Image>(nameof(Source));
    public static readonly PropertyKey StretchProperty = PropertyKey.Create<StretchMode, Image>(nameof(Stretch), StretchMode.Uniform);
    public static readonly PropertyKey StretchDirectionProperty = PropertyKey.Create<StretchDirection, Image>(nameof(StretchDirection), StretchDirection.Both);

    [Parameter] protected string Source { get => Properties.Get<string>(SourceProperty); set => Properties.Set(SourceProperty, value); }
    [Parameter] protected StretchMode Stretch { get => Properties.Get<StretchMode>(StretchProperty); set => Properties.Set(StretchProperty, value); }
    [Parameter] protected StretchDirection StretchDirection { get => Properties.Get<StretchDirection>(StretchDirectionProperty); set => Properties.Set(StretchDirectionProperty, value); }

    private Vector2 _imageSize;
    private LayoutCache _imgLayoutCache = new LayoutCache();
    private ElementRef _image;

    protected override async Task OnParametersSetAsync()
    {
        await (base.OnParametersSetAsync() ?? Task.CompletedTask);

        if (_imageSize != Vector2.Zero || string.IsNullOrWhiteSpace(Source))
            return;

        _imageSize = await ImageMeasureInterop.MeasureImageAsync(Source);
        LayoutCache?.InvalidateMeasure();
    }

    protected override void ApplyBounds()
    {
        var bounds = LayoutCache.RelativeBounds;
        RegisteredFunction.Invoke<object>("Xamzor.layout", LayoutRoot, bounds.X, bounds.Y, bounds.Width, bounds.Height);

        bounds = _imgLayoutCache.RelativeBounds;
        RegisteredFunction.Invoke<object>("Xamzor.layout", _image, bounds.X, bounds.Y, bounds.Width, bounds.Height);
    }

    public override LayoutFunc Layout =>
        Layouts.TraceSpecial(ToString(),
            Layouts.Callback(onArrangeOut: (_, __) => ApplyBounds(), child:
                FillSpace(FillSpaceMode.AllowOverflow,
                    Inset(Margin,
                        Cache(LayoutCache,
                            FillSpace(FillSpaceMode.Exact,
                                Cache(_imgLayoutCache,
                                    Align(HorizontalAlignment, VerticalAlignment,
                                        FixedSize(new Vector2(Width, Height),
                                            ClampSize(new Vector2(MinWidth, MinHeight), new Vector2(MaxWidth, MaxHeight),
                                                Inset(Padding,
                                                    Scale(Stretch, StretchDirection,
                                                        FixedSize(_imageSize)))))))))))));
}