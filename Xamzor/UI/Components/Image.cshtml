@inherits UIElement

<div id="@Id" class="@CssClass" style="@LayoutCss">
    <img style="@InnerCss" src="@Source" onerror="this.style.display = 'none'" />
</div>

@functions{

    public string Source { get; set; }

    public bool IsDraggable { get; set; } = false;

    public ImageStretch Stretch { get; set; } = ImageStretch.Uniform;

    public StretchDirection StretchDirection { get; set; } = StretchDirection.Both;

    protected override void ComputeOwnLayoutCss(System.Text.StringBuilder sb)
    {
        base.ComputeOwnLayoutCss(sb);

        var size =
            Stretch == ImageStretch.Fill ? "100% 100%" :
            Stretch == ImageStretch.Uniform ? "contain" :
            Stretch == ImageStretch.UniformToFill ? "cover" :
            Stretch == ImageStretch.None ? "none" :
            throw new NotImplementedException();

        sb.Append($"background-image: url({Source}); ");
        sb.Append($"background-size: {size}; ");
        sb.Append($"background-position: {AlignmentToPosition(HorizontalAlignment)} {AlignmentToPosition(VerticalAlignment)}; ");
    }

    private string InnerCss
    {
        get
        {
            var sb = new System.Text.StringBuilder();

            if (!double.IsNaN(Width))
                sb.Append($"width: {Width}px; ");

            if (!double.IsNaN(Height))
                sb.Append($"height: {Height}px; ");

            if (MinWidth > 0)
                sb.Append($"min-width: {MinWidth}px; ");

            if (MinHeight > 0)
                sb.Append($"min-height: {MinHeight}px; ");

            if (MaxWidth != double.PositiveInfinity)
                sb.Append($"max-width: {MaxWidth}px; ");

            if (MaxHeight != double.PositiveInfinity)
                sb.Append($"max-height: {MaxHeight}px; ");

            switch (Stretch)
            {
                case ImageStretch.Fill:
                    break;

                case ImageStretch.Uniform:
                    sb.Append($"object-fit: contain; ");
                    break;

                case ImageStretch.UniformToFill:
                    sb.Append($"object-fit: cover; ");
                    break;

                case ImageStretch.None:
                    sb.Append($"object-fit: none; ");
                    break;
            }

            sb.Append($"object-position: {AlignmentToPosition(HorizontalAlignment)} {AlignmentToPosition(VerticalAlignment)}; ");


            return sb.ToString();
        }
    }

    private static string AlignmentToPosition(Alignment a) =>
        a == Alignment.Start ? "0%" :
        a == Alignment.End ? "100%" :
        a == Alignment.Center ? "50%" :
        a == Alignment.Stretch ? "50%" :
        throw new NotImplementedException();

    // TODO: 'Stretch' behavior does not match XAML 100%. If image fits into space, centering (50%) is correct.
    // If image exceeds available space, XAML aligns at start instead of center.
}