@inherits UIElement

<div id="@Id" class="@CssClass" style="@Css" ref="LayoutRoot">
    @ChildContent.SurroundWithParent(this)
</div>

@functions{

    private string Css => "display: grid; position: absolute; width: 100%; height: 100%;";

    public IXamzorViewOwner Owner { get; set; }

    protected override void OnInit()
    {
        base.OnInit();

        Application.WindowResized += () =>
        {
            // TODO: Fix invalidation flow
            LayoutManager.Instance.InvalidateArrange(this);
            LayoutCache.IsArrangeValid = false;

            System.Console.WriteLine("WindowResized: " + LayoutCache.IsMeasureValid + LayoutCache.IsArrangeValid);
            LayoutCache.InvalidateMeasure();
            System.Console.WriteLine("WindowResized: " + LayoutCache.IsMeasureValid + LayoutCache.IsArrangeValid);
            LayoutManager.Instance.RunQueuedLayoutPass();
        };

        Owner?.OnXamzorViewInitialized(this);
    }

    protected override void OnAfterRender()
    {
        if (!IsRealized)
        {
            // Rendering for the first time
            LayoutManager.Instance.ExecuteInitialLayoutPass(this);

            // TODO: Calling StateHasChanged() in OnAfterRender() breaks rendering.
            //       Maybe we should report this?
            //StateHasChanged();
        }

        base.OnAfterRender();
    }

    public Vector2 DetermineRootSize()
    {
        try
        {
            var sizeString = RegisteredFunction.Invoke<string>("Xamzor.getSize", LayoutRoot);
            var sizeParts = sizeString.Split(',');
            Width = double.Parse(sizeParts[0]);
            Height = double.Parse(sizeParts[1]);
            return new Vector2(Width, Height);
        }
        catch (JavaScriptException)
        {
            return Vector2.Zero; // Not yet rendered
        }
    }

    public interface IXamzorViewOwner
    {
        void OnXamzorViewInitialized(XamzorView view);
    }
}