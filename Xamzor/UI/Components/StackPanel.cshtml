@inherits UIElement

<div id="@Id" class="@CssClass" style="@CssStyle" ref="LayoutRoot">
    @ChildContent.SurroundWithParent(this)
</div>

@functions{

    public static readonly PropertyKey OrientationProperty = PropertyKey.Create<Orientation, StackPanel>(nameof(Orientation), Orientation.Vertical);
    public static readonly PropertyKey BackgroundProperty = PropertyKey.Create<string, StackPanel>(nameof(Background));
    public static readonly PropertyKey SpacingProperty = PropertyKey.Create<double, StackPanel>(nameof(Spacing));

    [Parameter] protected Orientation Orientation { get => Properties.Get<Orientation>(OrientationProperty); set => Properties.Set(OrientationProperty, value); }
    [Parameter] protected string Background { get => Properties.Get<string>(BackgroundProperty); set => Properties.Set(BackgroundProperty, value); }
    [Parameter] protected double Spacing { get => Properties.Get<double>(SpacingProperty); set => Properties.Set(SpacingProperty, value); }

    protected override void ComputeCss(System.Text.StringBuilder sb)
    {
        base.ComputeCss(sb);

        if (!string.IsNullOrEmpty(Background))
            sb.Append($"background-color: {Background}; ");
    }

    protected override LayoutFunc ChildLayout => Layouts.Stack(Orientation, Spacing, Children.OfType<UIElement>().Select(child => child.Layout));
}