@inherits UIElement

<div id="@Id" class="@CssClass" style="@LayoutCss background-color: @Background;">
    @ChildContent
</div>

@functions{

    public static readonly PropertyKey OrientationProperty = PropertyKey.Create<Orientation, StackPanel>(nameof(Orientation), Orientation.Vertical);
    public static readonly PropertyKey BackgroundProperty = PropertyKey.Create<string, StackPanel>(nameof(Background));
    public static readonly PropertyKey SpacingProperty = PropertyKey.Create<double, StackPanel>(nameof(Spacing));

    [Parameter] protected Orientation Orientation { get => Properties.Get<Orientation>(OrientationProperty); set => Properties.Set(OrientationProperty, value); }
    [Parameter] protected string Background { get => Properties.Get<string>(BackgroundProperty); set => Properties.Set(BackgroundProperty, value); }
    [Parameter] protected double Spacing { get => Properties.Get<double>(SpacingProperty); set => Properties.Set(SpacingProperty, value); }

    protected override void ComputeOwnLayoutCss(System.Text.StringBuilder sb)
    {
        base.ComputeOwnLayoutCss(sb);

        var isHorizontal = Orientation == Orientation.Horizontal;
        sb.Append($"grid-auto-flow: {(isHorizontal ? "column" : "row")}; ");
        sb.Append($"grid-auto-{(isHorizontal ? "columns" : "rows")}: max-content; ");
        sb.Append($"grid-template-{(isHorizontal ? "columns" : "rows")}: none; ");

        if (Spacing != 0)
            sb.Append($"grid-gap: {Spacing}px; ");
    }
}