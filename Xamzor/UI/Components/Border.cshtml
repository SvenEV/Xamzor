@inherits UIElement

<div id="@Id" class="@CssClass" style="@LayoutCss" ref="LayoutRoot">@ChildContent</div>

@functions{

    public static readonly PropertyKey BorderThicknessProperty = PropertyKey.Create<Thickness, Border>(nameof(BorderThickness));
    public static readonly PropertyKey CornerRadiusProperty = PropertyKey.Create<Thickness, Border>(nameof(CornerRadius));
    public static readonly PropertyKey BackgroundProperty = PropertyKey.Create<string, Border>(nameof(Background));
    public static readonly PropertyKey BorderBrushProperty = PropertyKey.Create<string, Border>(nameof(BorderBrush));

    [Parameter] protected Thickness BorderThickness { get => Properties.Get<Thickness>(BorderThicknessProperty); set => Properties.Set(BorderThicknessProperty, value); }
    [Parameter] protected Thickness CornerRadius { get => Properties.Get<Thickness>(CornerRadiusProperty); set => Properties.Set(CornerRadiusProperty, value); }
    [Parameter] protected string Background { get => Properties.Get<string>(BackgroundProperty); set => Properties.Set(BackgroundProperty, value); }
    [Parameter] protected string BorderBrush { get => Properties.Get<string>(BorderBrushProperty); set => Properties.Set(BorderBrushProperty, value); }

    protected override void ComputeOwnLayoutCss(System.Text.StringBuilder sb)
    {
        base.ComputeOwnLayoutCss(sb);

        if (Background != null)
            sb.Append($"background-color: {Background}; ");

        if (BorderBrush != null)
            sb.Append($"border-color: {BorderBrush}; ");

        if (BorderThickness != Thickness.Zero)
            sb.Append($"border-width: {Css.FromThickness(BorderThickness)}; border-style: solid;");

        if (CornerRadius != Thickness.Zero)
            sb.Append($"border-radius: {Css.FromThickness(CornerRadius)}; ");
    }

    // TODO: Offset should NOT include BorderThickness.TopLeft as that is already
    // accounted for by the HTML layout. We might need a custom Inset()-function here.
    protected override LayoutFunc ChildLayout =>
        Layouts.Inset(BorderThickness, base.ChildLayout);
}